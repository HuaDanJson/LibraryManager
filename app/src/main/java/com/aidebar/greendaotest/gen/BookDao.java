package com.aidebar.greendaotest.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.example.jason.examination.data.Book;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BookName = new Property(1, String.class, "bookName", false, "Book");
        public final static Property BookPress = new Property(2, String.class, "bookPress", false, "BOOK_PRESS");
        public final static Property BookIntroduce = new Property(3, String.class, "bookIntroduce", false, "BOOK_INTRODUCE");
        public final static Property BookWriter = new Property(4, String.class, "bookWriter", false, "BOOK_WRITER");
        public final static Property BookValue = new Property(5, String.class, "bookValue", false, "BOOK_VALUE");
        public final static Property BookPublishingTime = new Property(6, String.class, "bookPublishingTime", false, "BOOK_PUBLISHING_TIME");
        public final static Property BookCover = new Property(7, String.class, "bookCover", false, "BOOK_COVER");
        public final static Property Classification = new Property(8, String.class, "classification", false, "CLASSIFICATION");
        public final static Property IsReadBefore = new Property(9, boolean.class, "isReadBefore", false, "IS_READ_BEFORE");
    }


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"Book\" TEXT," + // 1: bookName
                "\"BOOK_PRESS\" TEXT," + // 2: bookPress
                "\"BOOK_INTRODUCE\" TEXT," + // 3: bookIntroduce
                "\"BOOK_WRITER\" TEXT," + // 4: bookWriter
                "\"BOOK_VALUE\" TEXT," + // 5: bookValue
                "\"BOOK_PUBLISHING_TIME\" TEXT," + // 6: bookPublishingTime
                "\"BOOK_COVER\" TEXT," + // 7: bookCover
                "\"CLASSIFICATION\" TEXT," + // 8: classification
                "\"IS_READ_BEFORE\" INTEGER NOT NULL );"); // 9: isReadBefore
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
 
        String bookPress = entity.getBookPress();
        if (bookPress != null) {
            stmt.bindString(3, bookPress);
        }
 
        String bookIntroduce = entity.getBookIntroduce();
        if (bookIntroduce != null) {
            stmt.bindString(4, bookIntroduce);
        }
 
        String bookWriter = entity.getBookWriter();
        if (bookWriter != null) {
            stmt.bindString(5, bookWriter);
        }
 
        String bookValue = entity.getBookValue();
        if (bookValue != null) {
            stmt.bindString(6, bookValue);
        }
 
        String bookPublishingTime = entity.getBookPublishingTime();
        if (bookPublishingTime != null) {
            stmt.bindString(7, bookPublishingTime);
        }
 
        String bookCover = entity.getBookCover();
        if (bookCover != null) {
            stmt.bindString(8, bookCover);
        }
 
        String classification = entity.getClassification();
        if (classification != null) {
            stmt.bindString(9, classification);
        }
        stmt.bindLong(10, entity.getIsReadBefore() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
 
        String bookPress = entity.getBookPress();
        if (bookPress != null) {
            stmt.bindString(3, bookPress);
        }
 
        String bookIntroduce = entity.getBookIntroduce();
        if (bookIntroduce != null) {
            stmt.bindString(4, bookIntroduce);
        }
 
        String bookWriter = entity.getBookWriter();
        if (bookWriter != null) {
            stmt.bindString(5, bookWriter);
        }
 
        String bookValue = entity.getBookValue();
        if (bookValue != null) {
            stmt.bindString(6, bookValue);
        }
 
        String bookPublishingTime = entity.getBookPublishingTime();
        if (bookPublishingTime != null) {
            stmt.bindString(7, bookPublishingTime);
        }
 
        String bookCover = entity.getBookCover();
        if (bookCover != null) {
            stmt.bindString(8, bookCover);
        }
 
        String classification = entity.getClassification();
        if (classification != null) {
            stmt.bindString(9, classification);
        }
        stmt.bindLong(10, entity.getIsReadBefore() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookPress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bookIntroduce
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bookWriter
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bookValue
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bookPublishingTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // bookCover
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // classification
            cursor.getShort(offset + 9) != 0 // isReadBefore
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookPress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBookIntroduce(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBookWriter(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBookValue(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBookPublishingTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBookCover(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setClassification(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsReadBefore(cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Book entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
